library(workflow)
wf_pull_all()
library(RA)
library(RTA)
auto_import_all()
View(gambia_f1_minilog)
workflow:::use_script_addin()
workflow:::use_script_addin()
workflow:::view_report_addin()
workflow:::use_script_addin()
workflow:::use_script_addin()
wf_use_shinyapp("survey progress f1")
auto_import_all(site = params$projcode)
RTA::load_packages(readr, tidyr, dplyr, DT, RTA)
data <- gambia_f1
name_dict <- make_dict(col, col_name)
col <- c("f1_region_id", "f1_region_lb", "f1_hf_number",
"f1_lga_id", "f1_lga_code", "f1_lga_lb", "f1_district_id",
"f1_district_code", "f1_district_lb", "f1_village_id",
"f1_village_lb", "f1_hf_lb", "f1_location", "f1_hf_type",
"f1_visit_id", "f1_visit_lb", "f1_date", "f1_enum_lb",
"f1_enum_id", "f1_sup_lb", "f1_sup_id", "f1_sup_date",
"f1_result", "f1_result_other")
col_name <- c("region_id", "region_lb", "hf_number",
"lga_id", "lga_code", "lga_lb", "district_id",
"district_code", "district_lb", "village_id",
"village_lb", "hf_lb", "location", "hf_type",
"visit_id", "visit_lb", "date", "enum_lb",
"enum_id", "sup_lb", "sup_id", "sup_date",
"result", "result_other")
name_dict <- make_dict(col, col_name)
data <- select(data,
username, staffcode, submission_date, starttime, endtime,
instanceID, one_of(col))
names(data) <- encode(names(data), name_dict)
View(data)
data
utils::data()
install.packages("~/Analytic/function/mockupr_0.1.0.tar.gz", repos = NULL, type = "source")
View(gambia_f1)
workflow:::use_script_addin()
workflow:::publish_rmd_addin()
workflow::push_to_datasource
workflow:::publish_rmd_addin
context <- rstudioapi::getSourceEditorContext()
path <- context[["path"]]
if (path == "")
stop("Please save file before publishing.", call. = FALSE)
if (tolower(tools::file_ext(path)) != "rmd") {
todo("Only RMarkdown files with the .Rmd extension are supported.")
return(invisible())
}
workflow:::todo
bullet
workflow
workflow:::bullet
workflow:::wf_publish_rmd
parse_front_matter
parse_front_matter()
workflow:::parse_front_matter
rmd_lines <- readLines(rmd_file)
r_file <- "analytics/scripts/datasource/2018-04-15_test.R"
rmd_lines <- readLines(rmd_file)
r_lines <- readLines(r_file)
r_lines
delim <- grep("^---\\s*$", r_lines)
rmd_file <- "analytics/reports/rmarkdown/2018-04-09_survey-progress-by-enum.Rmd"
r_lines <- readLines(rmd_file)
delim <- grep("^---\\s*$", r_lines)
r_lines
rmd_file
r_lines
data.frame(r_lines)
a <- data.frame(r_lines)
View(a)
start <- delim[1] + 1
end <- delim[2] - 1
if (is.na(start) | is.na(end)) {
list()
}
else if (end - start < 1) {
list()
}
if (is.na(start) | is.na(end)) {
list()
} else if (end - start < 1) {
list()
} else {
yaml_str <- paste(rmd_lines[start:end], collapse = "\n")
yaml::yaml.load(yaml_str)
}
if (is.na(start) | is.na(end)) {
list()
} else if (end - start < 1) {
list()
} else {
yaml_str <- paste(r_lines[start:end], collapse = "\n")
yaml::yaml.load(yaml_str)
}
workflow:::update_report_api
rmscript <- readChar(rmd_file, file.info(rmd_file)$size)
r_file <- "analytics/scripts/datasource/2018-04-15_test.R"
if (missing(r_file)) {
stop("Argument 'r_file' is not provided", call. = FALSE)
}
if (!file.exists(r_file)) {
stop("File does not exist: ", r_file, call. = FALSE)
}
args_lst <- list(site = site)
args_lst <- list(site = "C026")
rest_api <- update_report_api(site)
rest_api <- workflow:::update_report_api("C026")
rest_api
RTA::get_project_url
new.env()
rest_api
RTA:::get_project_code
getGeneric()
GET("http://google.com/")
httr::GET("http://google.com/")
httr::GET("http://rta.rtcpms.com/")
resp <- httr::GET("http://rta.rtcpms.com/")
url <- content(resp, type = "text", encoding = "utf-8")
library(httr)
url <- content(resp, type = "text", encoding = "utf-8")
url
GET("https://local.rtcpms.com/ssDatamodelDatasource")
resp <- GET("https://local.rtcpms.com/ssDatamodelDatasource")
View(resp)
resp$request$output$
f
resp$request$output
resp$url
resp$all_headers
resp$request$headers
resp$request$output
resp$request$options$useragent
Sys.getenv()
Sys.getenv()
Sys.getenv(c("R_HOME", "R_PAPERSIZE", "R_PRINTCMD", "HOST"))
RTA:::get_project_url
installed.packages()
RTA:::get_project_path("C026")
Sys.setenv("/home/www/html/rta-rtcpms")
Sys.setenv(R ="/home/www/html/rta-rtcpms")
Sys.getenv(R)
Sys.getenv("R")
## -----------------------------------------------------------------------------
## HELPER FUNCTIONS
## -----------------------------------------------------------------------------
get_installed_packages <- function() {
pkgs <- installed.packages()
pkgs <- as.data.frame.matrix(pkgs, row.names = FALSE,
stringsAsFactors = FALSE)
pkgs <- pkgs[, c("Package", "Version", "Imports")]
pkgs
}
get_sessionInfo <- function() {
sinfo <- sessionInfo()
out <- data.frame(
platform = sinfo$platform,
os = sinfo$running,
r_version = sinfo$R.version$version.string,
stringsAsFactors = FALSE
)
out
}
pkgs <- get_installed_packages()
sinfo <- get_sessionInfo()
result <- cbind(pkgs, sinfo)
View(result)
search()
library(tidyverse)
df_list <- list(
iris = head(iris, 2),
mtcars = head(mtcars, 3)
)
df_list
map_int(df_list, nrow)
iris %>%
group_by(Species) %>%
summarise(pl_qtile = list(quantile(Petal.Length, c(0.25, 0.5, 0.75)))) %>%
mutate(pl_qtile = map(pl_qtile, enframe, name = "quantile"))
t<- iris %>%
group_by(Species) %>%
summarise(pl_qtile = list(quantile(Petal.Length, c(0.25, 0.5, 0.75)))) %>%
mutate(pl_qtile = map(pl_qtile, enframe, name = "quantile"))
View(t)
t$pl_qtile
t<- iris %>%
group_by(Species) %>%
summarise(pl_qtile = list(quantile(Petal.Length, c(0.25, 0.5, 0.75)))) %>%
mutate(pl_qtile = map(pl_qtile, enframe, name = "quantile")) %>% unnest()
